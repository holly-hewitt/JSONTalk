package JSONTalk;

import java.io.IOException;
import java.util.Collection;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

/**
 * This class is responsible for the lexing and parsing of a JSON file, by
 * calling the jsonLexer.lex() and jsonParser.parse() methods to generate a
 * token stream and AST of the JSON file. The class then calls the
 * JSONDescriptorVisitor to visit the AST produced by the parsing of the JSON
 * file, and generates a data structure containing jsonComplexElement objects.
 * Depending on the options specified by the user, a list of jsonComplexElements
 * is traversed, and the description is generated.
 *
 */
public class jsonRun {

	/**
	 * This method lexes the JSON file, producing a token stream.
	 * 
	 * @param filename The JSON file to be described (specified by the user)
	 * @return A tokenstream from the JSON file.
	 */
	static CommonTokenStream lex(String filename) {
		try {
			jsonLexer lexer = new jsonLexer(CharStreams.fromFileName(filename));
			CommonTokenStream tokens = new CommonTokenStream(lexer);
			return tokens;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * This method parses the tokens produced by the lex method, and returns an
	 * abstract syntax tree.
	 * 
	 * @param tokens Corresponding JSON file tokens produced from the lex method
	 * @return An abstract syntax tree
	 */
	static ParseTree parse(CommonTokenStream tokens) {
		jsonParser parser = new jsonParser(tokens);
		ParseTree tree = parser.json();
		return tree;
	}

	/**
	 * This method translates the boolean user input options to descriptionLevel
	 * enum values, and calls description methods with the correct flags set as
	 * paraemters.
	 * 
	 * @param tokens   Tokens generated by the lex metho
	 * @param tree     AST generated by the parse method
	 * @param topLevel Boolean indication of whether user has added this command as
	 *                 a flag
	 * @param objects  Boolean indication of whether user has added this command as
	 *                 a flag
	 * @param full     Boolean indication of whether user has added this command as
	 *                 a flag
	 * @param depth    Boolean indication of whether user has added this command as
	 *                 a flag
	 * @param nesting  Boolean indication of whether user has added this command as
	 *                 a flag
	 * @return The JSON description as a string
	 */
	static String describe(CommonTokenStream tokens, ParseTree tree, boolean topLevel, boolean objects, boolean full,
			int depth, boolean nesting) {
		jsonDescriptorVisitor<?> descriptor = new jsonDescriptorVisitor<>();
		descriptor.visit(tree);
		String finalDescription = "";
		Collection<jsonComplexElement> elements = jsonDescriptorVisitor.ctxElems.values();

		descriptionLevel nestingOrNot;

		if (nesting) {
			nestingOrNot = descriptionLevel.NESTING;
		} else {
			nestingOrNot = descriptionLevel.NO_NESTING;
		}

		if (topLevel) {
			System.out.println("\nTop level description: \n");
			finalDescription += "\nTop level description: ";
			finalDescription += generateDescription1(descriptionLevel.TOPLEVEL, nestingOrNot, elements, depth);
		}

		if (objects) {
			System.out.println("\nDescription including object and array details: \n");
			finalDescription += "\nDescription including object and array details: ";
			finalDescription += generateDescription1(descriptionLevel.COMPLEXELEMENTS, nestingOrNot, elements, depth);
		}

		if (full) {
			System.out.println("\nFull description: \n");
			finalDescription += "\nFull description: ";
			finalDescription += generateDescription1(descriptionLevel.FULL, nestingOrNot, elements, depth);
		}

		return finalDescription;

		// TextToSpeech.SpeakString(finalDescription);
	}

	/**
	 * This method traverses the collection of jsonComplexElements, and prints out
	 * the description of each one. The description printed out and added to the
	 * final description string will depend on the parameters of this method.
	 * 
	 * @param l     Description level. Will either be full, top-level, or
	 *              objects-and-arrays
	 * @param n     Will specify whether nesting is indicated by the user.
	 * @param x     This is the collection of jsonCOmplexElements produced when
	 *              jsonDescriptorVisitor visits the nodes of the AST produced by
	 *              jsonParse
	 * @param depth Default value is 100 unless the user has specified a different
	 *              depth on the command line.
	 * @return A String description adhering to the description level, nesting and
	 *         depth parameters passed to the method
	 */
	private static String generateDescription1(descriptionLevel l, descriptionLevel n, Collection<jsonComplexElement> x,
			int depth) {
		String description = "";
		for (jsonComplexElement object : x) {
			if (!object.elementDescription(l, n).equals("")) {
				if (object.getDepth() <= depth) {
					System.out.println(object.elementDescription(l, n));
					description += "\n" + object.elementDescription(l, n);
				}

			}
			if (l == descriptionLevel.TOPLEVEL) {
				break;
			}
		}
		return description;
	}

}
